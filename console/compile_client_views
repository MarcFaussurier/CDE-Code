#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var Handlebars = require("handlebars");
var initialDir = "src/client/views";
var chalk = require("chalk");

var walk = function(initialDir, dir, done) {
    var results = [];
    var list = fs.readdirSync(dir);
    var pending = list.length;
    if (!pending) return done(null, results);
    for(var key in list) {
        var file = list[key];
        file = path.resolve(dir, file);
        stat = fs.statSync(file);
        if (stat && stat.isDirectory()) {
            walk(initialDir, file, function(err, res) {
                results = results.concat(res);
                if (!--pending) done(null, results);
            });
        } else {
            var split = file.split(".");
            if (split[split.length - 1] === "hbs") {
                var a = file.split(initialDir);
                results.push([file, a[a.length - 1]]);
                if (!--pending) done(null, results);
            }
        }
    }
};

var compileViews = function(dirs, output) {
    for(let k in dirs) {
        let initialDir = dirs[k];

        walk(initialDir, initialDir, function (err, res) {
            console.log(res);
            for(var k in res) {
                if (res.hasOwnProperty(k)) {
                    var template = fs.readFileSync(res[k][0]).toString();
                    var compiled = Handlebars.precompile(template);
                    var folders = output + res[k][1];
                    folders = folders.split("/");
                    delete folders[folders.length - 1];
                    fs.mkdirSync(folders.join("/"), { recursive: true });
                    fs.writeFileSync((output + res[k][1]).replace(".hbs", ".js"), compiled);
                }
            }
        });
    }
};

console.log(chalk.yellow("Now compiling client side views..."));
compileViews([initialDir], "generated/views");
console.log(chalk.green("Compilation done."));
